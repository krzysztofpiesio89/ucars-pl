generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  email                 String?                @unique
  name                  String?
  password              String?
  image                 String?
  emailVerified         DateTime?
  stripeCustomerId      String?                @unique
  lastSeen              DateTime?              // Nowe pole do śledzenia ostatniej wizyty
  accounts              Account[]
  messages              Message[]              @relation("UserMessages")
  notifications         Notification[]
  documents             Document[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  favorites             Favorite[]
  billingDetails        BillingDetails?
  role                  String                 @default("USER") // USER, ADMIN
  depositPaid           Boolean                @default(false)
  auctionParticipations AuctionParticipation[]
  payments              Payment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  accessToken       String?
  refreshToken      String?
  expiresAt         Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model BillingDetails {
  id           Int      @id @default(autoincrement())
  userId       String   @unique
  accountType  String   @default("INDIVIDUAL")
  firstName    String?
  lastName     String?
  companyName  String?
  taxId        String?
  addressLine1 String
  addressLine2 String?
  city         String
  postalCode   String
  country      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Car {
  id                    Int                    @id @default(autoincrement())
  stock                 String                 @unique
  year                  Int
  make                  String
  model                 String
  damageType            String
  mileage               Int?
  engineStatus          String
  bidPrice              Float
  buyNowPrice           Float?
  auctionDate           DateTime?
  detailUrl             String
  imageUrl              String
  version               String?
  origin                String?
  vin                   String?
  engineInfo            String?
  fuelType              String?
  cylinders             String?
  videoUrl              String?
  is360                 Boolean?               @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  favorites             Favorite[]
  auctionParticipations AuctionParticipation[]

  // Parsed Engine Info
  engineCapacityL       Float?
  cylinderArrangement   String?
  injectionType         String?
  camshaftType          String?
  valveTiming           String?
  isTurbo               Boolean?
  horsepower            Int?
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    String
  carId     Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  car  Car  @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@unique([userId, carId])
}

model AuctionParticipation {
  id             Int        @id @default(autoincrement())
  userId         String
  carId          Int
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  car            Car        @relation(fields: [carId], references: [id], onDelete: Cascade)
  maxBid         Float
  auctionStatus  String     // Zmieniono z 'status' dla jasności: IN_PROGRESS, WON, LOST
  paymentStatus  String     @default("UNPAID") // UNPAID, PAID
  shipment       Shipment?  // Relacja do przesyłki
  payments       Payment[]  // Historia płatności dla tej aukcji
  documents      Document[] // Dokumenty związane z tą aukcją
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@unique([userId, carId])
}

// NOWE MODELE

// Model do śledzenia płatności (depozyty, opłaty za aukcje)
model Payment {
  id                   String                @id @default(cuid())
  amount               Float
  currency             String
  status               String                // e.g., "succeeded", "pending", "failed"
  paymentIntentId      String                @unique
  userId               String
  user                 User                  @relation(fields: [userId], references: [id])
  auctionParticipationId Int?
  auctionParticipation AuctionParticipation? @relation(fields: [auctionParticipationId], references: [id])
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

// Model do śledzenia informacji o transporcie
model Shipment {
  id                     String   @id @default(cuid())
  status                 String   // e.g., "PENDING", "IN_TRANSIT", "DELIVERED"
  trackingNumber         String?
  trackingUrl            String?
  estimatedDelivery      DateTime?
  auctionParticipationId Int      @unique
  auctionParticipation   AuctionParticipation @relation(fields: [auctionParticipationId], references: [id])
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

// Model do obsługi wiadomości między użytkownikami a adminem
model Message {
  id          String   @id @default(cuid())
  subject     String
  body        String   @db.Text
  isRead      Boolean  @default(false)
  senderId    String
  sender      User     @relation("UserMessages", fields: [senderId], references: [id])
  recipientId String   // Może być ID admina lub użytkownika
  createdAt   DateTime @default(now())
}

// Model do powiadomień wysyłanych przez system/admina do użytkownika
model Notification {
  id      String   @id @default(cuid())
  title   String
  message String
  isRead  Boolean  @default(false)
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

// Model do przechowywania dokumentów użytkownika
model Document {
  id                     String                @id @default(cuid())
  fileName               String
  fileUrl                String
  fileType               String
  userId                 String
  user                   User                  @relation(fields: [userId], references: [id])
  auctionParticipationId Int?
  auctionParticipation   AuctionParticipation? @relation(fields: [auctionParticipationId], references: [id])
  createdAt              DateTime              @default(now())
}
